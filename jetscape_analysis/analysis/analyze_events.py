#!/usr/bin/env python3

""" Class to analyze a JETSCAPE output files: do jet-finding and produce a ROOT file for each pt-hat bin.

To run: generateJetscape -c ../config/jetscapeAnalysisConfig.yaml -o /my/outputdir

The outputdir should contain the JETSCAPE output files in the structure generated by generate_jetscape_events.py.

See README for pre-requisites.

.. codeauthor:: James Mulligan <james.mulligan@berkeley.edu>, UC Berkeley
"""

from __future__ import print_function

import argparse
import os
import subprocess
import sys

# Analysis
import tqdm
import yaml
import itertools

sys.path.append('../..')
from jetscape_analysis.analysis import example_analysis, scale_histograms
from jetscape_analysis.analysis.reader import reader_ascii, reader_hepmc
from jetscape_analysis.base import common_base

################################################################
class analyze_jetscape_events(common_base.common_base):

    # ---------------------------------------------------------------
    # Constructor
    # ---------------------------------------------------------------
    def __init__(self, config_file="", input_dir="", output_dir="", **kwargs):
        super(analyze_jetscape_events, self).__init__(**kwargs)
        self.config_file = config_file
        self.input_dir = input_dir
        self.output_dir = output_dir

        if not self.input_dir.endswith("/"):
            self.input_dir = self.input_dir + "/"

        # Create output dir
        if not self.output_dir.endswith("/"):
            self.output_dir = self.output_dir + "/"
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)

        self.initialize_config()

        print(self)

    # ---------------------------------------------------------------
    # Initialize config file into class members
    # ---------------------------------------------------------------
    def initialize_config(self):

        # Read config file
        with open(self.config_file, "r") as stream:
            config = yaml.safe_load(stream)
            
        self.parameter_scan_dict = config['parameter_scan']
        self.pt_hat_bins = self.parameter_scan_dict['pt_hat_bins']['values']

        self.debug_level = config["debug_level"]
        self.n_event_max = config["n_event_max"]
        self.reader_type = config["reader"]
        self.scale_histograms = config["scale_histograms"]
        self.merge_histograms = config["merge_histograms"]

    # ---------------------------------------------------------------
    # Main processing function
    # ---------------------------------------------------------------
    def analyze_jetscape_events(self):
    
        # Store list of parameter labels
        parameter_labels = [self.parameter_scan_dict[key]['label'] for key in self.parameter_scan_dict]

        # Create list of all combinations of parameters
        parameter_values = [self.parameter_scan_dict[key]['values'] for key in self.parameter_scan_dict]
        parameter_combinations = list(itertools.product(*parameter_values))
    
        # Remove that last pt-hat bin edge
        n_combinations_per_pthat = int(len(parameter_combinations)/len(self.pt_hat_bins))
        parameter_combinations = parameter_combinations[:-n_combinations_per_pthat]

        # Loop through all parameter combinations
        for index, parameter_combination in enumerate(parameter_combinations):
        
            pt_hat_bin = int(index / n_combinations_per_pthat)
            if pt_hat_bin < len(self.pt_hat_bins) - 1:
                pt_hat_min = self.pt_hat_bins[pt_hat_bin]
                pt_hat_max = self.pt_hat_bins[pt_hat_bin + 1]
            else:
                continue
            if index % n_combinations_per_pthat == 0:
                print('Analyzing pt-hat: {} - {} ...'.format(pt_hat_min, pt_hat_max))

            # Create label for output directory
            dir_label = ''
            for index, value in enumerate(parameter_combination):
                if index == 0:
                    dir_label += str(pt_hat_bin)
                    continue
                dir_label += '_'
                dir_label += parameter_labels[index]
                dir_label += str(value)
            if len(parameter_combination) > 1:
                print('    Analyzing {}'.format(dir_label))
                
            # Create outputDir for each bin
            output_dir_bin = '{}{}'.format(self.output_dir, dir_label)
            if not output_dir_bin.endswith("/"):
                output_dir_bin = output_dir_bin + "/"
            if not os.path.exists(output_dir_bin):
                os.makedirs(output_dir_bin)
    
            # Read HepMC output, get hadrons, do jet finding, and write histograms to ROOT file
            input_dir_bin = '{}{}'.format(self.input_dir, dir_label)
            input_file = os.path.join(input_dir_bin, "test_out.hepmc")
            self.run_jetscape_analysis(input_file, output_dir_bin, pt_hat_bin)

            # Scale histograms according to pthard bins cross-section
            if self.scale_histograms:
                print("Scaling pt-hat bins...")
                scale_histograms.scaleHistograms(output_dir_bin, pt_hat_bin)

        # Merge all pthard bins into a single output file
        if self.merge_histograms:
            cmd = "hadd {}AnalysisResultsFinal.root {}*/AnalysisResults.root".format(self.output_dir, self.output_dir)
            subprocess.run(cmd, check=True, shell=True)

    # ---------------------------------------------------------------
    # Main processing function for a single pt-hat bin
    # ---------------------------------------------------------------
    def run_jetscape_analysis(self, input_file, output_dir_bin, pt_hat_bin):

        # Create reader class
        if self.reader_type == "hepmc":
            reader = reader_hepmc.reader_hepmc(input_file)
        elif self.reader_type == "ascii":
            reader = reader_ascii.reader_ascii(input_file)

        # Create analysis task
        analyzer = example_analysis.example_analysis(self.config_file, input_file, output_dir_bin, pt_hat_bin)

        # Initialize analysis output objects
        analyzer.initialize_output_objects()

        # Iterate through events
        pbar = tqdm.tqdm(range(self.n_event_max))
        for event in reader(n_events=self.n_event_max):

            if not event:
                nstop = pbar.n
                pbar.close()
                print("End of HepMC file at event {} ".format(nstop))
                break

            analyzer.analyze_event(event)
            pbar.update()

        # Write analysis task output to ROOT file
        analyzer.write_output_objects()


##################################################################
if __name__ == "__main__":
    # Define arguments
    parser = argparse.ArgumentParser(description="Generate JETSCAPE events")
    parser.add_argument(
        "-c",
        "--configFile",
        action="store",
        type=str,
        metavar="configFile",
        default="/home/jetscape-user/JETSCAPE-analysis/config/jetscapeAnalysisConfig.yaml",
        help="Path of config file for analysis",
    )
    parser.add_argument(
        "-i",
        "--inputDir",
        action="store",
        type=str,
        metavar="inputDir",
        default="/home/jetscape-user/JETSCAPE-analysis/TestOutput",
        help="Input directory containing JETSCAPE output files",
    )
    parser.add_argument(
        "-o",
        "--outputDir",
        action="store",
        type=str,
        metavar="outputDir",
        default="/home/jetscape-user/JETSCAPE-analysis/TestOutput",
        help="Output directory for output to be written to",
    )

    # Parse the arguments
    args = parser.parse_args()

    # If invalid configFile is given, exit
    if not os.path.exists(args.configFile):
        print('File "{0}" does not exist! Exiting!'.format(args.configFile))
        sys.exit(0)

    # If invalid inputDir is given, exit
    if not os.path.exists(args.inputDir):
        print('File "{0}" does not exist! Exiting!'.format(args.inputDir))
        sys.exit(0)

    analysis_manager = analyze_jetscape_events(config_file=args.configFile, input_dir=args.inputDir, output_dir=args.outputDir)
    analysis_manager.analyze_jetscape_events()
